// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	dto "request-handler-unit-test-example/users/dto"

	mock "github.com/stretchr/testify/mock"
)

// Controller is an autogenerated mock type for the Controller type
type Controller struct {
	mock.Mock
}

type Controller_Expecter struct {
	mock *mock.Mock
}

func (_m *Controller) EXPECT() *Controller_Expecter {
	return &Controller_Expecter{mock: &_m.Mock}
}

// CreateUser provides a mock function with given fields: req
func (_m *Controller) CreateUser(req dto.CreateUserRequest) (dto.CreateUserResponse, error) {
	ret := _m.Called(req)

	var r0 dto.CreateUserResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(dto.CreateUserRequest) (dto.CreateUserResponse, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(dto.CreateUserRequest) dto.CreateUserResponse); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Get(0).(dto.CreateUserResponse)
	}

	if rf, ok := ret.Get(1).(func(dto.CreateUserRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Controller_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type Controller_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - req dto.CreateUserRequest
func (_e *Controller_Expecter) CreateUser(req interface{}) *Controller_CreateUser_Call {
	return &Controller_CreateUser_Call{Call: _e.mock.On("CreateUser", req)}
}

func (_c *Controller_CreateUser_Call) Run(run func(req dto.CreateUserRequest)) *Controller_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(dto.CreateUserRequest))
	})
	return _c
}

func (_c *Controller_CreateUser_Call) Return(_a0 dto.CreateUserResponse, _a1 error) *Controller_CreateUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Controller_CreateUser_Call) RunAndReturn(run func(dto.CreateUserRequest) (dto.CreateUserResponse, error)) *Controller_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetUsers provides a mock function with given fields:
func (_m *Controller) GetUsers() (dto.GetUsersResponse, error) {
	ret := _m.Called()

	var r0 dto.GetUsersResponse
	var r1 error
	if rf, ok := ret.Get(0).(func() (dto.GetUsersResponse, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() dto.GetUsersResponse); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(dto.GetUsersResponse)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Controller_GetUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUsers'
type Controller_GetUsers_Call struct {
	*mock.Call
}

// GetUsers is a helper method to define mock.On call
func (_e *Controller_Expecter) GetUsers() *Controller_GetUsers_Call {
	return &Controller_GetUsers_Call{Call: _e.mock.On("GetUsers")}
}

func (_c *Controller_GetUsers_Call) Run(run func()) *Controller_GetUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Controller_GetUsers_Call) Return(_a0 dto.GetUsersResponse, _a1 error) *Controller_GetUsers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Controller_GetUsers_Call) RunAndReturn(run func() (dto.GetUsersResponse, error)) *Controller_GetUsers_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewController interface {
	mock.TestingT
	Cleanup(func())
}

// NewController creates a new instance of Controller. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewController(t mockConstructorTestingTNewController) *Controller {
	mock := &Controller{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
